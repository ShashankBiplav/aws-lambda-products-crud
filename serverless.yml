org: shashankbiplav
app: products-crud
service: products-crud
frameworkVersion: "2 || 3"

provider:
  name: aws
  runtime: nodejs12.x
  profile: serverlessUser
  stage: dev
  environment:
    tableName: ${self:custom.tableName}
  lambdaHashingVersion: 20201221
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
          Resource:
            - { "Fn::GetAtt": ["ProductsTable", "Arn"] }

# package:
#   individually: true

custom:
  tableName: ProductsTable

functions:
  getProduct:
    handler: src/handlers.getProduct
    events:
      - httpApi:
          path: /product/{productID}
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createProduct:
    handler: src/handlers.createProduct
    events:
      - httpApi:
          path: /product
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  updateProduct:
    handler: src/handlers.updateProduct
    events:
      - httpApi:
          path: /product/{id}
          method: put
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  deleteProduct:
    handler: src/handlers.deleteProduct
    events:
      - httpApi:
          path: /product/{id}
          method: delete
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  listProduct:
    handler: src/handlers.listAllProducts
    events:
      - httpApi:
          path: /products
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

plugins:
  - serverless-plugin-typescript

resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: productID
            AttributeType: S
          - AttributeName: category
            AttributeType: S

        KeySchema:
          - AttributeName: productID
            KeyType: HASH
          - AttributeName: category
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false

    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        # Generate a name based on the stage
        IdentityPoolName: ${self:provider.stage}-identity-pool
        # Don't allow unathenticated users
        AllowUnauthenticatedIdentities: false
        # Link to our User Pool
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: ["CognitoUserPool", "ProviderName"]

      ApiGatewayAuthorizer:
        DependsOn:
          - ApiGatewayRestApi
        Type: AWS::ApiGateway::Authorizer
        Properties:
          Name: cognito-authorizer
          IdentitySource: method.request.header.Authorization
          RestApiId:
            Ref: ApiGatewayRestApi
          Type: COGNITO_USER_POOLS
          ProviderARNs:
            - Fn::GetAtt: ["CognitoUserPool", "ProviderName"]

# Print out the Id of the User Pool that is created
outputs:
  UserPoolId:
    Value:
      Ref: CognitoUserPool

  UserPoolClientId:
    Value:
      Ref: CognitoUserPoolClient

  IdentityPoolId:
    Value:
      Ref: CognitoIdentityPool
